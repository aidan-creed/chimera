// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: item_queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
	item_type, 
	scope,
	business_key,
	status,
	custom_properties,
	embedding
) VALUES (
	$1, $2, $3, $4, $5, $6
)
RETURNING id, item_type, scope, business_key, status, custom_properties, embedding, created_at, updated_at
`

type CreateItemParams struct {
	ItemType         ItemType        `json:"item_type"`
	Scope            pgtype.Text     `json:"scope"`
	BusinessKey      pgtype.Text     `json:"business_key"`
	Status           ItemStatus      `json:"status"`
	CustomProperties []byte          `json:"custom_properties"`
	Embedding        pgvector.Vector `json:"embedding"`
}

// Inserts a new item record into database
// Go is responsible for constructing the custom_properties JSONB
func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.ItemType,
		arg.Scope,
		arg.BusinessKey,
		arg.Status,
		arg.CustomProperties,
		arg.Embedding,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemType,
		&i.Scope,
		&i.BusinessKey,
		&i.Status,
		&i.CustomProperties,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createItemEvent = `-- name: CreateItemEvent :one
INSERT INTO items_events (
	item_id,
	event_type,
	event_data,
	created_by
) VALUES (
	$1, $2, $3, $4
)
RETURNING id, item_id, event_type, event_data, created_by, created_at
`

type CreateItemEventParams struct {
	ItemID    int64  `json:"item_id"`
	EventType string `json:"event_type"`
	EventData []byte `json:"event_data"`
	CreatedBy int64  `json:"created_by"`
}

// Inserts a new event record for a specific time
func (q *Queries) CreateItemEvent(ctx context.Context, arg CreateItemEventParams) (ItemsEvent, error) {
	row := q.db.QueryRow(ctx, createItemEvent,
		arg.ItemID,
		arg.EventType,
		arg.EventData,
		arg.CreatedBy,
	)
	var i ItemsEvent
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.EventType,
		&i.EventData,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deactivateItemsBySource = `-- name: DeactivateItemsBySource :exec
UPDATE items SET status = 'inactive'
WHERE item_type= $1 AND custom_properties->>'reporting_source' = $2
`

type DeactivateItemsBySourceParams struct {
	ItemType         ItemType `json:"item_type"`
	CustomProperties []byte   `json:"custom_properties"`
}

func (q *Queries) DeactivateItemsBySource(ctx context.Context, arg DeactivateItemsBySourceParams) error {
	_, err := q.db.Exec(ctx, deactivateItemsBySource, arg.ItemType, arg.CustomProperties)
	return err
}

const getEventsForItem = `-- name: GetEventsForItem :many
SELECT id, item_id, event_type, event_data, created_by, created_at FROM "items_events"
WHERE item_id = $1
ORDER BY created_at DESC
`

// Fetch the event history for a specific item, newest first
func (q *Queries) GetEventsForItem(ctx context.Context, itemID int64) ([]ItemsEvent, error) {
	rows, err := q.db.Query(ctx, getEventsForItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemsEvent
	for rows.Next() {
		var i ItemsEvent
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.EventType,
			&i.EventData,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemForUpdate = `-- name: GetItemForUpdate :one
SELECT id, item_type, scope, business_key, status, custom_properties, embedding, created_at, updated_at FROM "items"
WHERE id = $1 LIMIT 1
`

// Fetch a single item for update
func (q *Queries) GetItemForUpdate(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRow(ctx, getItemForUpdate, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemType,
		&i.Scope,
		&i.BusinessKey,
		&i.Status,
		&i.CustomProperties,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET
	scope = $2,
	status = $3,
	custom_properties = $4,
	updated_at = NOW()
WHERE
	id = $1
RETURNING id, item_type, scope, business_key, status, custom_properties, embedding, created_at, updated_at
`

type UpdateItemParams struct {
	ID               int64       `json:"id"`
	Scope            pgtype.Text `json:"scope"`
	Status           ItemStatus  `json:"status"`
	CustomProperties []byte      `json:"custom_properties"`
}

// Updates the mutable fields of a specific item
func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItem,
		arg.ID,
		arg.Scope,
		arg.Status,
		arg.CustomProperties,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemType,
		&i.Scope,
		&i.BusinessKey,
		&i.Status,
		&i.CustomProperties,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertItems = `-- name: UpsertItems :execrows
INSERT INTO items (
	item_type, scope, business_key, status, custom_properties, embedding
)
SELECT
	item_type,
	scope, 
	business_key,
	'active',
	custom_properties,
	embedding
FROM temp_items_staging
ON CONFLICT (item_type, business_key) DO UPDATE SET 
	status = EXCLUDED.status,
	scope = EXCLUDED.scope,
	custom_properties = items.custom_properties || EXCLUDED.custom_properties,
	embedding = EXCLUDED.embedding,
	updated_at = NOW()
`

// Insert new records from staging, or update existing ones based on business key
func (q *Queries) UpsertItems(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, upsertItems)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
