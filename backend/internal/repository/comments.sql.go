// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: comments.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const addMentionToComment = `-- name: AddMentionToComment :exec
INSERT INTO comment_mentions (
	comment_id,
	user_id
) VALUES (
	$1, $2
) ON CONFLICT DO NOTHING
`

type AddMentionToCommentParams struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) AddMentionToComment(ctx context.Context, arg AddMentionToCommentParams) error {
	_, err := q.db.Exec(ctx, addMentionToComment, arg.CommentID, arg.UserID)
	return err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
	item_id,
	comment,
	user_id
) VALUES (
	$1, $2, $3
)
RETURNING id, item_id, comment, user_id, created_at, updated_at
`

type CreateCommentParams struct {
	ItemID  int64  `json:"item_id"`
	Comment string `json:"comment"`
	UserID  int64  `json:"user_id"`
}

type CreateCommentRow struct {
	ID        int64              `json:"id"`
	ItemID    int64              `json:"item_id"`
	Comment   string             `json:"comment"`
	UserID    int64              `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRow(ctx, createComment, arg.ItemID, arg.Comment, arg.UserID)
	var i CreateCommentRow
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Comment,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCommentsForItem = `-- name: ListCommentsForItem :many
SELECT
	c.id,
	c.comment,
	c.created_at,
	u.display_name,
	-- Aggregate mentioned user IDs and names into JSON array
	(
		SELECT COALESCE(json_agg(json_build_object('user_id', mu.id, 'display_name', mu.display_name)), '[]')
		FROM comment_mentions cm
		JOIN users mu ON cm.user_id = mu.id
		WHERE cm.comment_id = c.id
	) AS mentioned_users
FROM
	comments c
JOIN
	users u ON c.user_id = u.id
WHERE
	c.item_id = $1
ORDER BY
	c.created_at ASC
`

type ListCommentsForItemRow struct {
	ID             int64              `json:"id"`
	Comment        string             `json:"comment"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	DisplayName    pgtype.Text        `json:"display_name"`
	MentionedUsers interface{}        `json:"mentioned_users"`
}

func (q *Queries) ListCommentsForItem(ctx context.Context, itemID int64) ([]ListCommentsForItemRow, error) {
	rows, err := q.db.Query(ctx, listCommentsForItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCommentsForItemRow
	for rows.Next() {
		var i ListCommentsForItemRow
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.CreatedAt,
			&i.DisplayName,
			&i.MentionedUsers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setCommentEmbedding = `-- name: SetCommentEmbedding :exec
UPDATE comments
SET
	embedding = $2
WHERE
	id = $1
`

type SetCommentEmbeddingParams struct {
	ID        int64           `json:"id"`
	Embedding pgvector.Vector `json:"embedding"`
}

// Sets the embedding for a specific comment after its been created
func (q *Queries) SetCommentEmbedding(ctx context.Context, arg SetCommentEmbeddingParams) error {
	_, err := q.db.Exec(ctx, setCommentEmbedding, arg.ID, arg.Embedding)
	return err
}
