// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	AddMentionToComment(ctx context.Context, arg AddMentionToCommentParams) error
	// Assign a specific role to a user
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error
	// Grants a user access to a specific scope
	AssignScopeToUser(ctx context.Context, arg AssignScopeToUserParams) error
	CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error)
	// Inserts a new ingestion error record for a row that failed processing.
	CreateIngestionError(ctx context.Context, arg CreateIngestionErrorParams) (IngestionError, error)
	// Inserts a new file ingestion job record.
	CreateIngestionJob(ctx context.Context, arg CreateIngestionJobParams) (IngestionJob, error)
	// Inserts a new item record into database
	// Go is responsible for constructing the custom_properties JSONB
	CreateItem(ctx context.Context, arg CreateItemParams) (Item, error)
	// Inserts a new event record for a specific time
	CreateItemEvent(ctx context.Context, arg CreateItemEventParams) (ItemsEvent, error)
	// Creates a temporary table for staging items during ingest
	// This table is dropped on commit
	CreateTempItemsStagingTable(ctx context.Context) error
	// Creates a new user record from the authentication provider's details
	CreateUserFromAuthProvider(ctx context.Context, arg CreateUserFromAuthProviderParams) (User, error)
	DeactivateItemsBySource(ctx context.Context, arg DeactivateItemsBySourceParams) error
	// Fetch the event history for a specific item, newest first
	GetEventsForItem(ctx context.Context, itemID int64) ([]ItemsEvent, error)
	// Retrieves ingestion errors associated with a specific job ID, with pagination support
	GetIngestionErrorsByJobID(ctx context.Context, jobID pgtype.UUID) ([]IngestionError, error)
	// Fetch a single item for update
	GetItemForUpdate(ctx context.Context, id int64) (Item, error)
	// Fetch a single user by their external auth provider ID
	GetUserByAuthProviderSubject(ctx context.Context, authProviderSubject string) (User, error)
	IncrementIngestionJobResolvedRows(ctx context.Context, id pgtype.UUID) error
	// Checks for the existence of an item by its type and business key. Returns 1 if it exists, 0 otherwise.
	ItemExistsByBusinessKey(ctx context.Context, arg ItemExistsByBusinessKeyParams) (int32, error)
	ListCommentsForItem(ctx context.Context, itemID int64) ([]ListCommentsForItemRow, error)
	// Lists ingestion jobs with pagination support
	ListIngestionJobs(ctx context.Context, arg ListIngestionJobsParams) ([]ListIngestionJobsRow, error)
	// Fetch all available roles in system
	ListRoles(ctx context.Context) ([]Role, error)
	// Removes all roles from a user. Useful when completely re-assigning roles
	RemoveAllRolesFromUser(ctx context.Context, userID int64) error
	// Removes all scope access from a user
	RemoveAllScopesFromUser(ctx context.Context, userID int64) error
	// Removes a specific role from a user
	RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error
	//Revokes a user's access from a specific scope.
	RemoveScopeFromUser(ctx context.Context, arg RemoveScopeFromUserParams) error
	// Sets the embedding for a specific comment after its been created
	SetCommentEmbedding(ctx context.Context, arg SetCommentEmbeddingParams) error
	// Updates only the is_admin status of a specific user
	// This is a priviliged action and should be protected at API layer
	SetUserAdminStatus(ctx context.Context, arg SetUserAdminStatusParams) (User, error)
	UpdateIngestionErrorWithCorrection(ctx context.Context, arg UpdateIngestionErrorWithCorrectionParams) (IngestionError, error)
	// Updates the status and details of an ingestion job
	UpdateIngestionJobStatus(ctx context.Context, arg UpdateIngestionJobStatusParams) error
	// Updates the mutable fields of a specific item
	UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error)
	// Updates a user's mutable details
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	//Insert new records from staging, or update existing ones based on business key
	UpsertItems(ctx context.Context) (int64, error)
}

var _ Querier = (*Queries)(nil)
