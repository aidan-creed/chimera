// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package insurance

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

type IngestionErrorStatus string

const (
	IngestionErrorStatusNew       IngestionErrorStatus = "new"
	IngestionErrorStatusResolved  IngestionErrorStatus = "resolved"
	IngestionErrorStatusDiscarded IngestionErrorStatus = "discarded"
)

func (e *IngestionErrorStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IngestionErrorStatus(s)
	case string:
		*e = IngestionErrorStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IngestionErrorStatus: %T", src)
	}
	return nil
}

type NullIngestionErrorStatus struct {
	IngestionErrorStatus IngestionErrorStatus `json:"ingestion_error_status"`
	Valid                bool                 `json:"valid"` // Valid is true if IngestionErrorStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIngestionErrorStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IngestionErrorStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IngestionErrorStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIngestionErrorStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IngestionErrorStatus), nil
}

type ItemStatus string

const (
	ItemStatusActive   ItemStatus = "active"
	ItemStatusInactive ItemStatus = "inactive"
	ItemStatusArchived ItemStatus = "archived"
)

func (e *ItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemStatus(s)
	case string:
		*e = ItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemStatus: %T", src)
	}
	return nil
}

type NullItemStatus struct {
	ItemStatus ItemStatus `json:"item_status"`
	Valid      bool       `json:"valid"` // Valid is true if ItemStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemStatus), nil
}

type ItemType string

const (
	ItemTypeKNOWLEDGECHUNK ItemType = "KNOWLEDGE_CHUNK"
	ItemTypePARKVISITATION ItemType = "PARK_VISITATION"
	ItemTypeMISSIONFACTS   ItemType = "MISSION_FACTS"
	ItemTypePOLICYHOLDER   ItemType = "POLICYHOLDER"
	ItemTypeINSURANCECLAIM ItemType = "INSURANCE_CLAIM"
	ItemTypeVENDORCODE     ItemType = "VENDOR_CODE"
	ItemTypeCHARGEBACK     ItemType = "CHARGEBACK"
	ItemTypeDELINQUENCIES  ItemType = "DELINQUENCIES"
)

func (e *ItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemType(s)
	case string:
		*e = ItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemType: %T", src)
	}
	return nil
}

type NullItemType struct {
	ItemType ItemType `json:"item_type"`
	Valid    bool     `json:"valid"` // Valid is true if ItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemType) Scan(value interface{}) error {
	if value == nil {
		ns.ItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemType), nil
}

type AuditItemsChange struct {
	AuditID   int64              `json:"audit_id"`
	TargetID  int64              `json:"target_id"`
	Operation string             `json:"operation"`
	ChangedBy pgtype.Int8        `json:"changed_by"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
	OldData   []byte             `json:"old_data"`
	NewData   []byte             `json:"new_data"`
}

type AuditUsersChange struct {
	AuditID   int64              `json:"audit_id"`
	TargetID  int64              `json:"target_id"`
	Operation string             `json:"operation"`
	ChangedBy pgtype.Int8        `json:"changed_by"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
	OldData   []byte             `json:"old_data"`
	NewData   []byte             `json:"new_data"`
}

type Comment struct {
	ID        int64              `json:"id"`
	ItemID    int64              `json:"item_id"`
	Comment   string             `json:"comment"`
	UserID    int64              `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Embedding pgvector.Vector    `json:"embedding"`
}

type CommentMention struct {
	CommentID int64 `json:"comment_id"`
	UserID    int64 `json:"user_id"`
}

type Contact struct {
	ID          int64              `json:"id"`
	DisplayName string             `json:"display_name"`
	FirstName   pgtype.Text        `json:"first_name"`
	LastName    pgtype.Text        `json:"last_name"`
	Email       pgtype.Text        `json:"email"`
	Phone       pgtype.Text        `json:"phone"`
	LastSeenAt  pgtype.Timestamptz `json:"last_seen_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

// Stores individual rows that failed validation during an ingestion job and tracks their triage status.
type IngestionError struct {
	ID               pgtype.UUID        `json:"id"`
	JobID            pgtype.UUID        `json:"job_id"`
	Timestamp        pgtype.Timestamptz `json:"timestamp"`
	OriginalRowData  []byte             `json:"original_row_data"`
	ReasonForFailure string             `json:"reason_for_failure"`
	// The lifecycle of the error: new, pending_revalidation, resolved, ignored.
	Status string `json:"status"`
	// The user-corrected version of the data, awaiting re-validation.
	CorrectedData []byte             `json:"corrected_data"`
	ResolvedAt    pgtype.Timestamptz `json:"resolved_at"`
	// The user who submitted the correction for this error.
	ResolvedBy pgtype.Int8 `json:"resolved_by"`
}

// Tracks the metadata and status of a single data upload job.
type IngestionJob struct {
	ID pgtype.UUID `json:"id"`
	// The type of source from which data is being ingested, e.g., csv, api, etc.
	SourceType    string `json:"source_type"`
	SourceDetails []byte `json:"source_details"`
	// The type of item being ingested, corresponds to the items.item_type column.
	ItemType      string             `json:"item_type"`
	Status        string             `json:"status"`
	StartedAt     pgtype.Timestamptz `json:"started_at"`
	CompletedAt   pgtype.Timestamptz `json:"completed_at"`
	ErrorDetails  pgtype.Text        `json:"error_details"`
	UserID        pgtype.Int8        `json:"user_id"`
	SourceUri     pgtype.Text        `json:"source_uri"`
	TotalRows     pgtype.Int4        `json:"total_rows"`
	ProcessedRows pgtype.Int4        `json:"processed_rows"`
	// A counter for how many errored rows have been successfully corrected by a user.
	InitialErrorCount pgtype.Int4 `json:"initial_error_count"`
	ResolvedRowsCount pgtype.Int4 `json:"resolved_rows_count"`
}

type Item struct {
	ID               int64              `json:"id"`
	ItemType         ItemType           `json:"item_type"`
	Scope            pgtype.Text        `json:"scope"`
	BusinessKey      pgtype.Text        `json:"business_key"`
	Status           ItemStatus         `json:"status"`
	CustomProperties []byte             `json:"custom_properties"`
	Embedding        pgvector.Vector    `json:"embedding"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type ItemAssignment struct {
	ID             int64              `json:"id"`
	ItemID         int64              `json:"item_id"`
	UserID         int64              `json:"user_id"`
	AssignedAsRole string             `json:"assigned_as_role"`
	AssignedAt     pgtype.Timestamptz `json:"assigned_at"`
	IsActive       bool               `json:"is_active"`
}

type ItemContact struct {
	ID              int64       `json:"id"`
	ItemID          int64       `json:"item_id"`
	ContactID       int64       `json:"contact_id"`
	AssociationType pgtype.Text `json:"association_type"`
}

type ItemsEvent struct {
	ID        int64              `json:"id"`
	ItemID    int64              `json:"item_id"`
	EventType string             `json:"event_type"`
	EventData []byte             `json:"event_data"`
	CreatedBy int64              `json:"created_by"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Notification struct {
	ID               int64              `json:"id"`
	UserID           int64              `json:"user_id"`
	NotificationType string             `json:"notification_type"`
	SourceItemID     pgtype.Int8        `json:"source_item_id"`
	SourceCommentID  pgtype.Int8        `json:"source_comment_id"`
	IsRead           bool               `json:"is_read"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
}

type Permission struct {
	ID          int32       `json:"id"`
	Action      string      `json:"action"`
	Description pgtype.Text `json:"description"`
}

type Role struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

type RolePermission struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

type StatusHistory struct {
	ID        int64              `json:"id"`
	ItemID    int64              `json:"item_id"`
	Status    ItemStatus         `json:"status"`
	Notes     pgtype.Text        `json:"notes"`
	UserID    int64              `json:"user_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID                  int64              `json:"id"`
	AuthProviderSubject string             `json:"auth_provider_subject"`
	Email               string             `json:"email"`
	DisplayName         pgtype.Text        `json:"display_name"`
	IsActive            bool               `json:"is_active"`
	IsAdmin             bool               `json:"is_admin"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
}

type UserRole struct {
	UserID int64 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

type UserScopeAccess struct {
	UserID int64  `json:"user_id"`
	Scope  string `json:"scope"`
}

type VwInsuranceClaim struct {
	ID                int64              `json:"id"`
	ItemType          ItemType           `json:"item_type"`
	ClaimID           pgtype.Text        `json:"claim_id"`
	PolicyNumber      pgtype.Text        `json:"policy_number"`
	SystemStatus      ItemStatus         `json:"system_status"`
	Embedding         pgvector.Vector    `json:"embedding"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	PolicyholderID    string             `json:"policyholder_id"`
	ClaimType         string             `json:"claim_type"`
	DateOfLoss        pgtype.Date        `json:"date_of_loss"`
	DescriptionOfLoss string             `json:"description_of_loss"`
	ClaimAmount       pgtype.Numeric     `json:"claim_amount"`
	BusinessStatus    string             `json:"business_status"`
	AdjusterAssigned  string             `json:"adjuster_assigned"`
}

type VwPolicyholder struct {
	ID                int64              `json:"id"`
	ItemType          ItemType           `json:"item_type"`
	PolicyholderID    pgtype.Text        `json:"policyholder_id"`
	State             pgtype.Text        `json:"state"`
	Status            ItemStatus         `json:"status"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	PolicyholderName  string             `json:"policyholder_name"`
	City              string             `json:"city"`
	CustomerSinceDate pgtype.Date        `json:"customer_since_date"`
	CustomerLevel     string             `json:"customer_level"`
	ActivePolicies    []byte             `json:"active_policies"`
}
